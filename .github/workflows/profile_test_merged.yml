name: Profile cbds and bfgs using optiprofiler, small

on:
  push:
  workflow_dispatch:

env:
  GFORTRAN_VERSION: 12

jobs:
  test:
    name: Profile BDS and fminunc, small
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        matlab: [latest]
        dim: [small]
        with_optim_toolbox: [yes]
        solver: [cbds]
        competitor: [fminunc]
        run_plain: [false]
        feature: [plain, truncated_1]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Checkout OptiProfiler
        uses: actions/checkout@v4
        with:
          repository: optiprofiler/optiprofiler
          ref: matlab
          path: optiprofiler
      
      - name: Checkout BDS
        uses: actions/checkout@v4
        with:
          repository: blockwise-direct-search/bds
          ref: main
          path: bds

      - name: Install Texlive
        run: sudo apt-get update && sudo apt-get install texlive

      - name: Check whether LaTeX is installed
        run: pdflatex --version

      - name: Cache MATLAB
        id: cache-matlab
        uses: actions/cache@v4.0.1
        with:
          path: ${{ runner.tool_cache }}/MATLAB
          key: ${{ matrix.os }}-${{ matrix.matlab }}-${{ matrix.with_optim_toolbox }}

      - name: Set up MATLAB with optimization toolbox
        if: ${{ matrix.with_optim_toolbox == 'yes' }}
        uses: matlab-actions/setup-matlab@v2.1.2
        with:
          release: ${{ matrix.matlab }}
          products: Optimization_Toolbox

      - name: Run test
        uses: matlab-actions/run-command@v2.1.1
        with:
          command: |
            root_dir = pwd();
            ls;

            % Setup optiprofiler
            cd(fullfile(root_dir, 'optiprofiler'));
            setup;
            cd(root_dir);

            % Setup bds
            cd(fullfile(root_dir, 'bds'));
            setup;
            cd(fullfile(root_dir, 'bds', 'tests', 'competitors'));
            addpath(pwd);

            % Profile
            cd(fullfile(root_dir, 'bds', 'tests'));
            options = struct();
            options.feature_name = '${{ matrix.feature }}';
            options.labels = {'${{ matrix.solver }}', '${{ matrix.competitor }}'};
            options.dim = '${{ matrix.dim }}';
            options = rmfield(options, 'dim');
            options.mindim = 1;
            options.maxdim = 1;
            options.run_plain = ${{ matrix.run_plain }};
            profile_optiprofiler(options);
            cd(root_dir);

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: profile_optiprofiler_${{ matrix.solver }}_${{ matrix.competitor }}_${{ matrix.dim }}_${{ matrix.feature }}_plain_${{ matrix.run_plain }}
          path: ./bds/tests/out/**

      - name: List uploaded artifacts
        run: |
          echo "Uploaded artifacts:"
          ls -la ./bds/tests/out/

  # merge_artifacts:
  #   name: Merge Artifacts
  #   runs-on: ubuntu-latest
  #   needs: test
  #   permissions:
  #     actions: read
  #     contents: read
  #   strategy:
  #     matrix:
  #       feature: [plain, truncated_1]
    
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: profile_optiprofiler_cbds_fminunc_small_${{ matrix.feature }}_plain_false
  #         path: artifacts/${{ matrix.feature }}

  #     - name: List downloaded artifacts
  #       run: |
  #         echo "Artifact name being downloaded: profile_optiprofiler_cbds_fminunc_small_${{ matrix.feature }}_plain_false"
  #         echo "Artifacts contents:"
  #         ls -la artifacts/${{ matrix.feature }}/ || echo "Artifacts not found"

  #     - name: Upload merged artifacts
  #       if: success() && matrix.feature == 'truncated_1'
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: merged_artifacts
  #         path: artifacts/**
  #         if-no-files-found: error

  #     - name: List final artifacts
  #       if: success() && matrix.feature == 'truncated_1'
  #       run: |
  #         echo "Final artifacts:"
  #         ls -la artifacts/

  merge_artifacts:
    name: Merge Artifacts
    runs-on: ubuntu-latest
    needs: test
    permissions:
      actions: read
      contents: read
    strategy:
      matrix:
        feature: [plain, truncated_1]
    
    steps:
      - name: Setup workspace cache
        uses: actions/cache@v3
        with:
          path: artifacts
          key: artifacts-${{ github.run_id }}
          restore-keys: artifacts-${{ github.run_id }}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: profile_optiprofiler_cbds_fminunc_small_${{ matrix.feature }}_plain_false
          path: artifacts/${{ matrix.feature }}

      - name: List current artifacts
        run: |
          echo "Current feature: ${{ matrix.feature }}"
          ls -R artifacts/

      - name: Upload merged artifacts
        uses: actions/upload-artifact@v3
        with:
          name: merged_artifacts
          path: artifacts/**
          if-no-files-found: error
          retention-days: 1

      - name: List final artifacts
        run: |
          echo "All artifacts:"
          ls -R artifacts/