name: Profile cbds and bfgs using optiprofiler, small

on:
  push:
  workflow_dispatch:

env:
  GFORTRAN_VERSION: 12

jobs:
  test:
    name: Profile BDS and fminunc, small
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        matlab: [latest]
        dim: [small]
        with_optim_toolbox: [yes]
        solver: [cbds]
        competitor: [fminunc]
        run_plain: [false]
        feature: [plain, truncated_1]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Checkout OptiProfiler
        uses: actions/checkout@v4
        with:
          repository: optiprofiler/optiprofiler
          ref: matlab
          path: optiprofiler
      
      - name: Checkout BDS
        uses: actions/checkout@v4
        with:
          repository: blockwise-direct-search/bds
          ref: main
          path: bds

      - name: Install Texlive
        run: sudo apt-get update && sudo apt-get install texlive

      - name: Check whether LaTeX is installed
        run: pdflatex --version

      - name: Cache MATLAB
        id: cache-matlab
        uses: actions/cache@v4.0.1
        with:
          path: ${{ runner.tool_cache }}/MATLAB
          key: ${{ matrix.os }}-${{ matrix.matlab }}-${{ matrix.with_optim_toolbox }}

      - name: Set up MATLAB with optimization toolbox
        if: ${{ matrix.with_optim_toolbox == 'yes' }}
        uses: matlab-actions/setup-matlab@v2.1.2
        with:
          release: ${{ matrix.matlab }}
          products: Optimization_Toolbox

      - name: Run test
        uses: matlab-actions/run-command@v2.1.1
        with:
          command: |
            root_dir = pwd();
            ls;

            % Setup optiprofiler
            cd(fullfile(root_dir, 'optiprofiler'));
            setup;
            cd(root_dir);

            % Setup bds
            cd(fullfile(root_dir, 'bds'));
            setup;
            cd(fullfile(root_dir, 'bds', 'tests', 'competitors'));
            addpath(pwd);

            % Profile
            cd(fullfile(root_dir, 'bds', 'tests'));
            options = struct();
            options.feature_name = '${{ matrix.feature }}';
            options.labels = {'${{ matrix.solver }}', '${{ matrix.competitor }}'};
            options.dim = '${{ matrix.dim }}';
            options = rmfield(options, 'dim');
            options.mindim = 1;
            options.maxdim = 1;
            options.run_plain = ${{ matrix.run_plain }};
            profile_optiprofiler(options);
            cd(root_dir);

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: profile_optiprofiler_${{ matrix.solver }}_${{ matrix.competitor }}_${{ matrix.dim }}_${{ matrix.feature }}_plain_${{ matrix.run_plain }}
          path: ./bds/tests/out/**

      - name: List uploaded artifacts
        run: |
          echo "Uploaded artifacts:"
          ls -la ./bds/tests/out/

  merge_artifacts:
    name: Merge Artifacts
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 设置 GH_TOKEN 环境变量 
    steps:

      - name: Checkout code
        uses: actions/checkout@v4  # 再次 checkout 代码以支持 GitHub CLI

      - name: List uploaded artifacts using API
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/actions/artifact

      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: merged_artifacts
          pattern: cbds_fminunc_*  # 与上传时相同的模式
          separate-directories: false